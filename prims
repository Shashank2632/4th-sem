import java.util.Scanner;
import java.util.Arrays;

public class prims{
    static void print(Object line){
        System.out.print(line);
    }

    static int ObtainMinimumCost(
            int AM[][], int visited[], int unvisited[], int source, int n){
                int TotalCost = 0, src = 0, index = 0;
                for(int i = 1; i < n; i++){
                    int minimum = 999;
                    for(int j = 0; j < n; j++){
                        if(visited[j] == 1){
                            for(int k = 0; k < n; k++){
                                if(unvisited[k] == 1 && AM[j][k] != 999){
                                    if(AM[j][k] < minimum){
                                        minimum = AM[j][k];
                                        index = k;
                                        src = j;
                                    }
                                }
                            }
                        }
                    }
                    visited[index] = 1;
                    unvisited[index] = 0;
                    TotalCost = TotalCost + minimum;
                    print((src + 1) + " -> " + (index + 1) + "\n");
                }
                return TotalCost;
            }

    public static void main(String[] args){
        Scanner in = new Scanner(System.in);

        print("Enter number of vertices: ");
        int n = in.nextInt();

        print("Enter source vertex: ");
        int source = in.nextInt();
        int AM[][] = new int[n][n];

        print("Enter an adjacency matrix of " + n + "x" + n + ": \n");
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                AM[i][j] = in.nextInt();
            }
        }

        int visited[] = new int[n];
        int unvisited[] = new int[n];
        Arrays.fill(visited, 0);
        Arrays.fill(unvisited, 1);

        visited[source-1] = 1;
        unvisited[source-1] = 0;

        print("Minimum Cost Obtained: " + ObtainMinimumCost(AM, visited, unvisited, source, n) + "\n");
    }
}
